This is your new Play application
slick_scala_playframework
=================================

i used slick plain sql playframework scala 
what we gona discover and more important 

create table if not exist and you gona discover it in store entity we keep person entity with manual table creation to see
the diffrence

     def createTableIfNotInTables(tables: Vector[MTable]): Future[Unit] = {
        if (!tables.exists(_.name.name == storequery.baseTableRow.tableName)) {
          connection.db.run(storequery.schema.create)
        } else {
          Future()
        }
      }
      val createTableIfNotExist: Future[Unit] = connection.db.run(MTable.getTables).flatMap(createTableIfNotInTables)
      Await.result(createTableIfNotExist, Duration.Inf)
      
 we gona display stores in which this person work LIST OF STORES 
 and the most important is how we map list in output 
 
 class Person {
  @Inject
  var store: store = _
  protected implicit def implicitPerson = store.writes
  val writes: Writes[Person1] = Writes {
    (color: Person1) => {
      implicit val getSupplierResult = GetResult(r => List[store1](store1(r.nextString, r.nextString, r.nextString)))
      implicit object JodaDateTimeWrites extends Writes[DateTime] {
        def writes(d: DateTime): JsValue = JsString(d.toString)
      }
      val s=sql"select s.id,s.name,s.age FROM store s join UUIDTest j on s.id=j.fk_store where s.id=${color.store}".as[(String,String,String)]
      var e =connection.db.run(s)
      var response = Json.obj(
        "id" -> color.id,
        "name" -> color.name,
        "age" -> color.age,
        "date"->Json.toJson(color.date)
      )
      e.map {
        response1 => {
          response+=("p"->Json.arr(Json.toJson(response1)))
          print("ee")
        }
      }.recover {
        case exception: Throwable => throw exception
      }
      response
    }
  }}
  
  mapping datetime in input and output 
  input :
   implicit def jodaTimeMapping: BaseColumnType[DateTime] = MappedColumnType.base[DateTime, Timestamp](
    dateTime => new Timestamp(dateTime.getMillis),
    timeStamp => new DateTime(timeStamp.getTime)
  )
  output :
   implicit object JodaDateTimeWrites extends Writes[DateTime] {
        def writes(d: DateTime): JsValue = JsString(d.toString)
      }
